private async Task ApplyRateLimit(HttpContext context, ClientRequestIdentity identity, List<RateLimitRule> rules, string methodEndpoint, bool isBurstLimit)
{
    methodEndpoint = char.ToUpper(methodEndpoint[0]) + methodEndpoint.Substring(1);

    if (isBurstLimit)
    {
        string period = "1m";
        var remainingLimits = new Dictionary<string, int>();
        var resetTimes = new Dictionary<string, string>();
        DateTime commonResetTime;

        var resetCacheKey = $"ResetTime:{identity.ClientId.Split('_')[0]}";

        var cachedResetTime = await this.counterStore.GetAsync(resetCacheKey, context.RequestAborted);
        if (cachedResetTime.HasValue)
        {
            commonResetTime = cachedResetTime.Value.Timestamp;
        }
        else
        {
            // Set the reset time to the next full minute boundary
            commonResetTime = DateTime.UtcNow.AddMinutes(1).AddSeconds(-DateTime.UtcNow.Second); // Adjust to the start of the next minute
            await this.counterStore.SetAsync(resetCacheKey, new RateLimitCounter { Timestamp = commonResetTime, Count = 0 }, TimeSpan.FromMinutes(1));
        }

        var tempRemainingLimits = new Dictionary<string, int>();
        var tempResetTimes = new Dictionary<string, string>();

        foreach (var rule in rules)
        {
            var counterId = this.BuildCounterKey1(identity, rule);
            var counter = await this.counterStore.GetAsync(counterId, context.RequestAborted).ConfigureAwait(false);

            if (!counter.HasValue)
            {
                counter = new RateLimitCounter { Timestamp = commonResetTime, Count = 0 };
            }

            // Check if the time has crossed the reset boundary (next full minute)
            if (DateTime.UtcNow >= commonResetTime)
            {
                // Reset the counter since the reset period has crossed
                counter = new RateLimitCounter
                {
                    Timestamp = DateTime.UtcNow.AddMinutes(1).AddSeconds(-DateTime.UtcNow.Second), // Set the reset time to the next full minute
                    Count = 0,
                };

                // Store the reset counter
                await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromMinutes(1));
            }
            else
            {
                // Otherwise, increment the counter
                counter = new RateLimitCounter
                {
                    Timestamp = counter.Value.Timestamp,
                    Count = counter.Value.Count + 1,
                };

                // Store the updated counter
                await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromMinutes(1));
            }

            // Set reset and remaining limits for the endpoint
            double remaining = rule.Limit - counter.Value.Count;
            tempResetTimes[rule.Endpoint] = commonResetTime.ToString("o");
            tempRemainingLimits[rule.Endpoint] = (int)Math.Max(0, remaining);

            if (string.Equals(rule.Endpoint, methodEndpoint, StringComparison.OrdinalIgnoreCase))
            {
                period = rule.Period;
            }
        }

        // If no specific endpoint reset times, set the main rule
        if (!tempResetTimes.ContainsKey(methodEndpoint))
        {
            var mainRule = rules.FirstOrDefault(r => r.Endpoint == methodEndpoint);
            if (mainRule != null)
            {
                var mainCounterId = this.BuildCounterKey1(identity, mainRule);
                var mainCounter = await this.counterStore.GetAsync(mainCounterId, context.RequestAborted).ConfigureAwait(false);

                if (!mainCounter.HasValue)
                {
                    mainCounter = new RateLimitCounter
                    {
                        Timestamp = commonResetTime,
                        Count = 0,
                    };
                }

                tempResetTimes[methodEndpoint] = mainCounter.Value.Timestamp.ToString("o");
                tempRemainingLimits[methodEndpoint] = (int)Math.Max(0, mainRule.Limit - mainCounter.Value.Count);
            }
        }

        // Add headers for burst limit
        foreach (var rule in rules)
        {
            var ruleCounterId = this.BuildCounterKey1(identity, rule);
            var ruleCounter = await this.counterStore.GetAsync(ruleCounterId, context.RequestAborted).ConfigureAwait(false);

            if (!ruleCounter.HasValue)
            {
                ruleCounter = new RateLimitCounter { Timestamp = commonResetTime, Count = 0 };
            }

            resetTimes[rule.Endpoint] = tempResetTimes[methodEndpoint];
            remainingLimits[rule.Endpoint] = (int)Math.Max(0, rule.Limit - ruleCounter.Value.Count);
        }

        const string headerLimit = "X-Burst-Limit-Limit";
        const string headerRemaining = "X-Burst-Limit-Remaining";
        const string headerReset = "X-Burst-Limit-Reset";

        this.AddHeader(headerLimit, period);
        this.AddHeader(headerRemaining, string.Join(", ", remainingLimits.Select(kv => $"{kv.Key}={kv.Value}")));
        this.AddHeader(headerReset, string.Join(", ", resetTimes.Select(kv => $"{kv.Key}={kv.Value}")));
    }
}