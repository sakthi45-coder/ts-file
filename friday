deleteYesBtn() {
  this.$nuxt.$spinner.show(true);
  const gridObj = this.$refs.grid1.ej2Instances;
  const selectedRecords: any[] = gridObj.getSelectedRecords();

  if (!selectedRecords.length) {
    this.$nuxt.$spinner.show(false);
    return;
  }

  const documentName = selectedRecords[0].messageTitle;
  const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', { documentName });
  const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', { documentName });

  const ids: string[] = selectedRecords.map(item => item.documentId);
  this.onNewNotificationReceived();
  this.$data.deleteDialogVisible = false;

  // Handle draft template deletion separately
  if (isStatusMatch(this.$nuxt.$route, ['drafts'])) {
    this.$api.template
      .deleteDraftTemplate(ids)
      .then(() => {
        this.selectedDocumentsCount = 0;
        this.checkState = false;
        this.hideSelectedItems(selectedRecords);
        this.scheduleGridRefresh();
        this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
      })
      .catch(() => {
        this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
      })
      .finally(() => {
        this.$nuxt.$spinner.show(false);
      });
  } else {
    // âœ… MODIFIED ELSE PART - Send entire array instead of looping
    this.$api.template.deleteTemplate(ids)
      .then(() => {
        this.selectedDocumentsCount = 0;
        this.checkState = false;
        this.hideSelectedItems(selectedRecords);
        this.scheduleGridRefresh();
        this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
      })
      .catch(() => {
        this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
      })
      .finally(() => {
        this.$nuxt.$spinner.show(false);
      });
  }

  this.isToolbar = false;
}
deletemergeTemplate(templateId: string[]) { 
  return $axios.$delete('/Template/DeleteTemplate/', {
    params: { templateId },  
    paramsSerializer: params => new URLSearchParams(params).toString(),
  });
}

[HttpDelete]
[Authorize]
[PolicyValidation(PolicyStatus = PolicyStatus.Internally)]
public async Task<IActionResult> DeleteTemplate(
    [GuidArray(ErrorMessage = ValidationMessages.ValidDocumentId)]
    [Required(ErrorMessage = ValidationMessages.Required)]
    string[] templateId)
{
    try
    {
        if (templateId == null || templateId.Length == 0 || templateId.Contains(string.Empty))
        {
            return this.BadRequest("Failure");
        }

        Dictionary<string, Task<bool?>> deleteTasks = new Dictionary<string, Task<bool?>>();

        foreach (var id in templateId)
        {
            deleteTasks.Add(id, this.templateService.DeleteTemplateItem(id, this.User, this.authorizationService, this.documentService, this.userDataService));
        }

        await Task.WhenAll(deleteTasks.Select(v => v.Value)).ConfigureAwait(false);

        if (deleteTasks.Any(x => x.Value.Result == null))
        {
            return this.Forbid();
        }

        return deleteTasks.All(x => x.Value.Result == true) ? this.Ok("Success") : this.BadRequest("Failure");
    }
    catch (Exception ex)
    {
        return this.BadRequest("Failure");
    }
}

