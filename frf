public async Task Invoke(HttpContext context)
{
    try
    {
        this.responseHeaders.Clear();
        var userDataService = new UserDataService(context);
        var mode = userDataService.Environment == ApplicationEnvironment.Test ? Mode.Test : Mode.Live;
        var checkidentity = await this.ResolveIdentityAsync(context).ConfigureAwait(false);
        var checkMinId = checkidentity.ClientId.Split('_')[0] + "_all";
        var checkPolicy = await this.clientPolicyStore.GetAsync($"{this.options.ClientPolicyPrefix}_{checkMinId}");
        var cacheKey = GetCacheKey(userDataService, mode);
        var cacheExists = await this.clientPolicyStore.ExistsAsync($"{this.options.ClientPolicyPrefix}_{cacheKey}").ConfigureAwait(false);

        if (checkPolicy == null)
        {
            var rules = new RateLimitRules
            {
                Id = Guid.NewGuid(),
                SubscriptionId = userDataService.SubscriptionId,
                Mode = mode,
                IsWhiteList = false,
            };

            List<RateLimitRule> generatedRules = new List<RateLimitRule>();
            foreach (BurstRateLimitMethod method in Enum.GetValues(typeof(BurstRateLimitMethod)))
            {
                var config = GetRateLimitConfigForEndpoint(method.ToString().ToLower(), this.options.RateLimitConfiguration);
                var rateLimitRule = CreateRateLimitRule(rules, config, method, "1m");
                generatedRules.Add(rateLimitRule);
            }

            generatedRules.Add(new RateLimitRule
            {
                Endpoint = "*",
                Id = rules.Id,
                IsWhiteList = rules.IsWhiteList,
                Limit = 50,
                Mode = rules.Mode,
                Period = "1h",
                SubscriptionId = rules.SubscriptionId,
            });

            await this.ProcessRulesAsync(generatedRules, cacheKey).ConfigureAwait(false);
        }

        this.options.DisableRateLimitHeaders = true;
        var identity = await this.ResolveIdentityAsync(context).ConfigureAwait(false);
        var minId = identity.ClientId.Split('_')[0] + "_all";

        var policy = await this.clientPolicyStore.GetAsync($"{this.options.ClientPolicyPrefix}_{minId}");
        if (policy != null)
        {
            var methodEndpoint = RateLimitHelper.GetMethodTypeFromAttribute(context);
            var isburstLimit = true;
            List<RateLimitRule> rule1 = policy.Rules.ToList();
            await this.ApplyRateLimit(context, identity, rule1, methodEndpoint, isburstLimit).ConfigureAwait(false);
        }

        // Apply shared hourly rules
        var hourlyId = identity.ClientId.Split('_')[0];
        await this.ApplyRulesAsync(
            context,
            new ClientRequestIdentity
            {
                ClientId = hourlyId,
                ClientIp = identity.ClientIp,
                Path = "*",
                HttpVerb = "*",
            },
            false).ConfigureAwait(false);

        foreach (var header in this.responseHeaders.GetItems())
        {
            context.Response.Headers[header.Key] = header.Value;
        }

        await this.next(context).ConfigureAwait(false);
    }
    catch (RateLimitReachedException)
    {
        context.Response.StatusCode = StatusCodes.Status429TooManyRequests;
        await context.Response.WriteAsync("Rate limit exceeded").ConfigureAwait(false);
    }
    catch (Exception)
    {
        context.Response.StatusCode = StatusCodes.Status500InternalServerError;
        await context.Response.WriteAsync("An error occurred while processing your request").ConfigureAwait(false);
    }
}
