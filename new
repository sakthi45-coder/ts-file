deleteYesBtn() {
  this.$nuxt.$spinner.show(true);
  const gridObj = this.$refs.grid1.ej2Instances;
  const selectedRecords: any[] = gridObj.getSelectedRecords();

  if (!selectedRecords.length) {
    this.$nuxt.$spinner.show(false);
    return;
  }

  const documentName = selectedRecords[0].messageTitle;
  const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', {
    documentName: documentName,
  });
  const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', {
    documentName: documentName,
  });

  const ids: string[] = selectedRecords.map(item => item.documentId);
  this.onNewNotificationReceived();
  this.$data.deleteDialogVisible = false;

  // Handle draft template deletion separately
  if (isStatusMatch(this.$nuxt.$route, ['drafts'])) {
    this.$api.template
      .deleteDraftTemplate(ids)
      .then(() => {
        this.selectedDocumentsCount = 0;
        this.checkState = false;
        this.hideSelectedItems(selectedRecords);
        this.scheduleGridRefresh();
        this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
      })
      .catch(() => {
        this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
      })
      .finally(() => {
        this.$nuxt.$spinner.show(false);
      });
  } else {
    // Handle regular template deletion
    const deletePromises = ids.map(templateId => {
      return this.$api.template.deleteTemplate(templateId)
        .then(() => {
          this.hideSelectedItems(selectedRecords);
          this.scheduleGridRefresh();
          this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
        })
        .catch(() => {
          this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
        });
    });

    // Wait for all deletions to complete before hiding the spinner
    Promise.all(deletePromises).finally(() => {
      this.scheduleGridRefresh();
      this.$nuxt.$spinner.show(false);
    });
  }

  this.isToolbar = false;
}
