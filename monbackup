private async Task ApplyRateLimit(HttpContext context, ClientRequestIdentity identity, List<RateLimitRule> rules, string methodEndpoint, bool isBurstLimit)
{
    if (isBurstLimit)
    {
        string period = "1m"; // Default period
        var remainingLimits = new Dictionary<string, int>();
        var resetTimes = new Dictionary<string, string>();

        foreach (var rule in rules)
        {
            var counterId = this.BuildCounterKey(identity, rule);
            var counter = await this.counterStore.GetAsync(counterId, context.RequestAborted).ConfigureAwait(false);

            if (!counter.HasValue)
            {
                counter = new RateLimitCounter { Timestamp = DateTime.UtcNow, Count = 0 };
            }

            // Decrement only for the matching method
            if (rule.Endpoint == methodEndpoint)
            {
                counter = new RateLimitCounter
                {
                    Timestamp = counter.Value.Timestamp,
                    Count = counter.Value.Count + 1
                };

                await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromMinutes(1));
            }

            // Store remaining limits for each method
            remainingLimits[rule.Endpoint] = Math.Max(0, rule.Limit - counter.Value.Count);
            resetTimes[rule.Endpoint] = DateTime.UtcNow.AddMinutes(1).ToString("o");

            // Set period from the matching rule
            if (rule.Endpoint == methodEndpoint)
            {
                period = rule.Period;
            }
        }

        // Generate Headers
        var headerLimit = "X-Burst-Limit-Limit";
        var headerRemaining = "X-Burst-Limit-Remaining";
        var headerReset = "X-Burst-Limit-Reset";

        this.AddHeader(headerLimit, period);
        this.AddHeader(headerRemaining, string.Join(", ", remainingLimits.Select(kv => $"{kv.Key}={kv.Value}")));
        this.AddHeader(headerReset, string.Join(", ", resetTimes.Select(kv => $"{kv.Key}={kv.Value}")));
    }
}
