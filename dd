deletemergeTemplate(templateIds: string[]) {
  return $axios.$delete('/Template/DeleteTemplate/', {
    params: { templateIds },
    paramsSerializer: params => paramsSerializer(params),
  });
},
deleteYesBtn() {
  this.$nuxt.$spinner.show(true);
  const gridObj = this.$refs.grid1.ej2Instances;
  const selectedRecords: any[] = gridObj.getSelectedRecords();

  if (!selectedRecords.length) {
    this.$nuxt.$spinner.show(false);
    return;
  }

  const documentName = selectedRecords[0].messageTitle;
  const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', {
    documentName: documentName,
  });
  const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', {
    documentName: documentName,
  });

  const ids: string[] = selectedRecords.map(item => item.documentId);
  this.onNewNotificationReceived();
  this.$data.deleteDialogVisible = false;

  // Handle draft template deletion separately
  if (isStatusMatch(this.$nuxt.$route, ['drafts'])) {
    this.$api.template
      .deleteDraftTemplate(ids)
      .then(() => {
        this.selectedDocumentsCount = 0;
        this.checkState = false;
        this.hideSelectedItems(selectedRecords);
        this.scheduleGridRefresh();
        this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
      })
      .catch(() => {
        this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
      })
      .finally(() => {
        this.$nuxt.$spinner.show(false);
      });
  } else {
    // Handle regular template deletion
    this.deletemergeTemplate(ids)
      .then(() => {
        this.scheduleGridRefresh();
        this.hideSelectedItems(selectedRecords);
        this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
      })
      .catch(() => {
        this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
      })
      .finally(() => {
        this.$nuxt.$spinner.show(false);
      });
  }

  this.isToolbar = false;
}
public async Task<ActionResult> DeleteTemplate([GuidArray(ErrorMessage = ValidationMessages.ValidDocumentId)][Required(ErrorMessage = ValidationMessages.Required)]string[] templateIds)
{
  if (templateIds == null || templateIds.Contains(string.Empty) || templateIds.Length == 0)
  {
    return this.BadRequest("Failure");
  }

  string baseUrl = this.requestDetailsService.HostedDomain;

  dynamic[] procParams = templateIds;

  // isAccessTid is set to false. since, we need to delete both the shared and original template types.
  var accessRightsList = await this.templateService.GetTemplatesByDocumentId(this.userDataService, templateIds, false).ConfigureAwait(false);
  if (accessRightsList.Count > 0)
  {
    var clearContainerTask = this.documentService.ClearContainers(templateIds, this.userDataService.OrganizationId);
    await this.templateService.DeleteTemplatesByDocumentIdsAsync(this.userDataService.OrganizationId, templateIds).ConfigureAwait(false);
    await clearContainerTask.ConfigureAwait(false);
    await this.documentService.NotifyDeletedTemplateUsers(accessRightsList, new Uri(baseUrl), this.hubContext, this.teamManagement).ConfigureAwait(false);
    _ = this.templateService.LogDeleteUserActivityAsync(accessRightsList, this.orgActivityService).ConfigureAwait(false);
    return this.Content("Success");
  }

  return this.BadRequest("Failure");
}
public async Task DeleteTemplatesByDocumentIdsAsync(string organizationId, string[] templateIds)
{
  foreach (var templateId in templateIds)
  {
    // Logic for deleting a template by its ID
    await this.DeleteTemplateItem(templateId, organizationId);
  }
}

public async Task<ActionResult> DeleteTemplates([GuidArray(ErrorMessage = ValidationMessages.ValidDocumentId)][Required(ErrorMessage = ValidationMessages.Required)]string[] templateIds)
{
  // Check if templateIds is null, empty, or contains empty string
  if (templateIds == null || templateIds.Contains(string.Empty) || templateIds.Length == 0)
  {
    return this.BadRequest("Failure");
  }

  string baseUrl = this.requestDetailsService.HostedDomain;

  // Get access rights list for the provided templateIds
  var accessRightsList = await this.templateService.GetTemplatesByDocumentId(this.userDataService, templateIds, false).ConfigureAwait(false);
  if (accessRightsList.Count == 0)
  {
    return this.BadRequest("Failure");
  }

  // Process the deletion of templates and their containers
  var clearContainerTasks = new List<Task>();
  var deleteTemplateTasks = new List<Task>();

  foreach (var templateId in templateIds)
  {
    // Delete template item
    deleteTemplateTasks.Add(this.DeleteTemplateItem(templateId, this.userDataService.OrganizationId));

    // Clear container for the template
    clearContainerTasks.Add(this.documentService.ClearContainers(templateId, this.userDataService.OrganizationId));
  }

  // Wait for all template deletions to complete
  await Task.WhenAll(deleteTemplateTasks).ConfigureAwait(false);

  // Wait for all container clear tasks to complete
  await Task.WhenAll(clearContainerTasks).ConfigureAwait(false);

  // Notify users about the deleted templates
  await this.documentService.NotifyDeletedTemplateUsers(accessRightsList, new Uri(baseUrl), this.hubContext, this.teamManagement).ConfigureAwait(false);

  // Log user activity for the deletion
  _ = this.templateService.LogDeleteUserActivityAsync(accessRightsList, this.orgActivityService).ConfigureAwait(false);

  // Return success message
  return this.Content("Success");
}

