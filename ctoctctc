private async Task ApplyRateLimit(HttpContext context, ClientRequestIdentity identity, List<RateLimitRule> rules, string methodEndpoint, bool isBurstLimit, bool isSlidingWindow)
{
    methodEndpoint = char.ToUpper(methodEndpoint[0]) + methodEndpoint.Substring(1);

    if (isBurstLimit)
    {
        string period = "1m";
        var remainingLimits = new Dictionary<string, int>();
        var resetTimes = new Dictionary<string, string>();
        DateTime commonResetTime;

        var resetCacheKey = $"ResetTime:{identity.ClientId.Split('_')[0]}";

        var cachedResetTime = await this.counterStore.GetAsync(resetCacheKey, context.RequestAborted);
        if (cachedResetTime.HasValue)
        {
            commonResetTime = cachedResetTime.Value.Timestamp;
        }
        else
        {
            commonResetTime = DateTime.UtcNow.AddMinutes(1);
            await this.counterStore.SetAsync(resetCacheKey, new RateLimitCounter { Timestamp = commonResetTime, Count = 0 }, TimeSpan.FromMinutes(1));
        }

        var tempRemainingLimits = new Dictionary<string, int>();
        var tempResetTimes = new Dictionary<string, string>();

        foreach (var rule in rules)
        {
            var counterId = this.BuildCounterKey1(identity, rule);
            var counter = await this.counterStore.GetAsync(counterId, context.RequestAborted).ConfigureAwait(false);

            if (!counter.HasValue)
            {
                counter = new RateLimitCounter { Timestamp = commonResetTime, Count = 0 };
            }

            if (counter.HasValue && counter.Value.Count > rule.Limit)
            {
                throw new RateLimitReachedException(rule);
            }

            DateTime reset;
            double remaining;

            if (string.Equals(rule.Endpoint, methodEndpoint, StringComparison.OrdinalIgnoreCase))
            {
                if (DateTime.UtcNow >= commonResetTime)
                {
                    counter = new RateLimitCounter
                    {
                        Timestamp = DateTime.UtcNow,
                        Count = 0,
                    };

                    await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromMinutes(1));
                }
                else
                {
                    counter = new RateLimitCounter
                    {
                        Timestamp = counter.Value.Timestamp,
                        Count = counter.Value.Count + 1,
                    };

                    await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromMinutes(1));
                }
            }

            reset = commonResetTime;
            remaining = rule.Limit - counter.Value.Count;

            tempResetTimes[rule.Endpoint] = reset.ToString("o");
            tempRemainingLimits[rule.Endpoint] = (int)Math.Max(0, remaining);

            if (string.Equals(rule.Endpoint, methodEndpoint, StringComparison.OrdinalIgnoreCase))
            {
                period = rule.Period;
            }
        }

        if (!tempResetTimes.ContainsKey(methodEndpoint))
        {
            var mainRule = rules.FirstOrDefault(r => r.Endpoint == methodEndpoint);
            if (mainRule != null)
            {
                var mainCounterId = this.BuildCounterKey1(identity, mainRule);
                var mainCounter = await this.counterStore.GetAsync(mainCounterId, context.RequestAborted).ConfigureAwait(false);

                if (!mainCounter.HasValue)
                {
                    mainCounter = new RateLimitCounter
                    {
                        Timestamp = commonResetTime,
                        Count = 0,
                    };
                }

                tempResetTimes[methodEndpoint] = mainCounter.Value.Timestamp.ToString("o");
                tempRemainingLimits[methodEndpoint] = (int)Math.Max(0, mainRule.Limit - mainCounter.Value.Count);
            }
        }

        foreach (var rule in rules)
        {
            var ruleCounterId = this.BuildCounterKey1(identity, rule);
            var ruleCounter = await this.counterStore.GetAsync(ruleCounterId, context.RequestAborted).ConfigureAwait(false);

            if (!ruleCounter.HasValue)
            {
                ruleCounter = new RateLimitCounter { Timestamp = commonResetTime, Count = 0 };
            }

            resetTimes[rule.Endpoint] = tempResetTimes[methodEndpoint];
            remainingLimits[rule.Endpoint] = (int)Math.Max(0, rule.Limit - ruleCounter.Value.Count);
        }

        const string headerLimit = "X-Burst-Limit-Limit";
        const string headerRemaining = "X-Burst-Limit-Remaining";
        const string headerReset = "X-Burst-Limit-Reset";

        this.AddHeader(headerLimit, period);
        this.AddHeader(headerRemaining, string.Join(", ", remainingLimits.Select(kv => $"{kv.Key}={kv.Value}")));
        this.AddHeader(headerReset, string.Join(", ", resetTimes.Select(kv => $"{kv.Key}={kv.Value}")));
    }

    // Sliding Window Logic
    if (isSlidingWindow)
    {
        var windowPeriodInSeconds = 60;  // 1-minute window
        var remainingLimits = new Dictionary<string, int>();
        var resetTimes = new Dictionary<string, string>();

        foreach (var rule in rules)
        {
            var counterId = this.BuildCounterKey1(identity, rule);
            var counter = await this.counterStore.GetAsync(counterId, context.RequestAborted).ConfigureAwait(false);

            if (!counter.HasValue)
            {
                counter = new RateLimitCounter
                {
                    Timestamp = DateTime.UtcNow,
                    Requests = new List<DateTime>() // This will store request timestamps for sliding window
                };
            }

            // Remove expired requests (older than the window period)
            counter.Value.Requests.RemoveAll(timestamp => (DateTime.UtcNow - timestamp).TotalSeconds > windowPeriodInSeconds);

            // If request count exceeds limit, throw exception
            if (counter.Value.Requests.Count >= rule.Limit)
            {
                throw new RateLimitReachedException(rule);
            }

            // Add the current timestamp
            counter.Value.Requests.Add(DateTime.UtcNow);

            // Update remaining request count and reset time
            remainingLimits[rule.Endpoint] = rule.Limit - counter.Value.Requests.Count;
            resetTimes[rule.Endpoint] = DateTime.UtcNow.AddSeconds(windowPeriodInSeconds).ToString("o");

            // Save the updated counter
            await this.counterStore.SetAsync(counterId, counter, TimeSpan.FromSeconds(windowPeriodInSeconds));
        }

        // Set sliding window response headers
        const string slidingWindowHeaderLimit = "X-Sliding-Window-Limit";
        const string slidingWindowHeaderRemaining = "X-Sliding-Window-Remaining";
        const string slidingWindowHeaderReset = "X-Sliding-Window-Reset";

        this.AddHeader(slidingWindowHeaderLimit, string.Join(", ", rules.Select(rule => $"{rule.Endpoint}={rule.Limit}")));
        this.AddHeader(slidingWindowHeaderRemaining, string.Join(", ", remainingLimits.Select(kv => $"{kv.Key}={kv.Value}")));
        this.AddHeader(slidingWindowHeaderReset, string.Join(", ", resetTimes.Select(kv => $"{kv.Key}={kv.Value}")));
    }
}