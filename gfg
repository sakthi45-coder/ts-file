using NUnit.Framework;
using Moq;
using AutoMapper;
using Microsoft.Extensions.Options;

[TestFixture]
public class RateLimitAttributeTests
{
    private RateLimitAttribute _rateLimitAttribute;
    private Mock<IClientPolicyStore> _clientPolicyStoreMock;
    private Mock<DataBaseContext> _dataBaseContextMock;
    private Mock<IMapper> _mapperMock;
    private Mock<IRateLimitingService> _rateLimitingServiceMock;
    private IOptions<ClientRateLimitOptions> _optionsMock;

    [SetUp]
    public void SetUp()
    {
        // Mock dependencies
        _clientPolicyStoreMock = new Mock<IClientPolicyStore>();
        _dataBaseContextMock = new Mock<DataBaseContext>();
        _mapperMock = new Mock<IMapper>();
        _rateLimitingServiceMock = new Mock<IRateLimitingService>();

        // Mock options for ClientRateLimitOptions
        _optionsMock = Options.Create(new ClientRateLimitOptions
        {
            // Example options data
        });

        // Initialize the RateLimitAttribute with the mocked dependencies
        _rateLimitAttribute = new RateLimitAttribute(
            _optionsMock,
            _clientPolicyStoreMock.Object,
            _dataBaseContextMock.Object,
            _mapperMock.Object,
            _rateLimitingServiceMock.Object
        );
    }

    [Test]
    public void GetRateLimitConfigForEndpoint_ShouldReturnCorrectConfigForEndpoint()
    {
        // Arrange
        var rateLimitConfiguration = new RateLimitConfigurationOption
        {
            Burst = new BurstRateLimit
            {
                Create = new RateLimitConfig { ProductionRateLimit = 10 },
                Read = new RateLimitConfig { ProductionRateLimit = 20 },
                Write = new RateLimitConfig { ProductionRateLimit = 30 },
                Delete = new RateLimitConfig { ProductionRateLimit = 40 }
            }
        };

        // Act
        var createConfig = _rateLimitAttribute.GetRateLimitConfigForEndpoint("create", rateLimitConfiguration);
        var readConfig = _rateLimitAttribute.GetRateLimitConfigForEndpoint("read", rateLimitConfiguration);

        // Assert
        Assert.NotNull(createConfig);
        Assert.AreEqual(10, createConfig.ProductionRateLimit);
        Assert.NotNull(readConfig);
        Assert.AreEqual(20, readConfig.ProductionRateLimit);
    }

    [Test]
    public void CreateRateLimitRule_ShouldCreateCorrectRateLimitRule()
    {
        // Arrange
        var rule = new RateLimitRules
        {
            Id = 1,
            IsWhiteList = false,
            Mode = Mode.Live,
            SubscriptionId = "sub1"
        };

        var config = new RateLimitConfig
        {
            ProductionRateLimit = 100,
            TestRateLimit = 50
        };

        var method = BurstRateLimitMethod.Create;
        var period = "1m"; // Assume OneMinutePeriod is defined as "1m"

        // Act
        var result = _rateLimitAttribute.CreateRateLimitRule(rule, config, method, period);

        // Assert
        Assert.AreEqual(100, result.Limit); // Mode is Live, so it should use ProductionRateLimit
        Assert.AreEqual("1m", result.Period);
        Assert.AreEqual(BurstRateLimitMethod.Create, result.BurstMethod);
    }
}
